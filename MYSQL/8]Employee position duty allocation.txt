8. Consider the following database
Employee(emp_no,name,skill,pay-rate) eno primary key
Position(posting_no,skill) posting_no primary key
Duty_allocation(posting_no,emp_no,day,shift)
Find the SQL queries for the following:
1. Get the duty allocation details for emp_no 123461 for the month of April 1986.
2. Find the shift details for Employee ‘xyz’
3. Get employees whose rate of pay is more than or equal to the rate of pay of employee ‘xyz’
4. Get the names and pay rates of employees with emp_no less than 123460 whose rate of pay is 
more than the rate of pay of at least one employee with emp_no greater than or equal to 123460.
5. Find the names of employees who are assigned to all positions that require a Chef’s skill
6 .Find the employees with the lowest pay rate
7 .Get the employee numbers of all employees working on at least two dates.
8 .Get a list of names of employees with the skill of Chef who are assigned a duty
9 .Get a list of employees not assigned a duty
10.Get a count of different employees on each shift

***************************************************************************************************************
-- Drop the database if it exists
DROP DATABASE IF EXISTS EmployeeDB;

-- Create a new database
CREATE DATABASE EmployeeDB;

-- Switch to the new database
USE EmployeeDB;

-- Create the Employee table
CREATE TABLE Employee (
    emp_no INT PRIMARY KEY,
    name VARCHAR(255),
    skill VARCHAR(255),
    pay_rate DECIMAL(10, 2)
);

-- Create the Position table
CREATE TABLE Position (
    posting_no INT PRIMARY KEY,
    skill VARCHAR(255)
);

-- Create the Duty_Allocation table
CREATE TABLE Duty_Allocation (
    posting_no INT,
    emp_no INT,
    day DATE,
    shift VARCHAR(255)
);

-- Insert sample data
INSERT INTO Employee (emp_no, name, skill, pay_rate) VALUES
    (123461, 'John Doe', 'Chef', 20.00),
    (123462, 'Jane Smith', 'Server', 15.00),
    (123463, 'Alice Johnson', 'Chef', 22.00),
    (123464, 'Bob Brown', 'Server', 17.00),
    (123465, 'Charlie Green', 'Chef', 18.00);

INSERT INTO Position (posting_no, skill) VALUES
    (1, 'Chef'),
    (2, 'Server');

-- Modify Duty_Allocation data to ensure non-empty results
INSERT INTO Duty_Allocation (posting_no, emp_no, day, shift) VALUES
    (1, 123461, '1986-04-01', 'Morning'),
    (1, 123461, '1986-04-02', 'Morning'),
    (1, 123463, '1986-04-01', 'Evening'),
    (1, 123463, '1986-04-02', 'Evening'),
    (2, 123462, '1986-04-01', 'Morning'),
    (2, 123462, '1986-04-02', 'Evening');

-- Run the queries:

-- 1. Get the duty allocation details for emp_no 123461 for the month of April 1986.
SELECT * FROM Duty_Allocation
WHERE emp_no = 123461
    AND MONTH(day) = 4
    AND YEAR(day) = 1986;

-- 2. Find the shift details for Employee 'John Doe'
SELECT emp_no, day, shift FROM Duty_Allocation
WHERE emp_no = 123461;

-- 3. Get employees whose rate of pay is more than or equal to the rate of pay of employee 'John Doe'
SELECT name, pay_rate FROM Employee
WHERE pay_rate >= (SELECT pay_rate FROM Employee WHERE name = 'John Doe');

-- 4. Get the names and pay rates of employees with emp_no less than 123460 whose rate of pay is more than the rate of pay of at least one employee with emp_no greater than or equal to 123460.
SELECT name, pay_rate FROM Employee
WHERE emp_no < 123460
    AND pay_rate > (SELECT MAX(pay_rate) FROM Employee WHERE emp_no >= 123460);

-- 5. Find the names of employees who are assigned to all positions that require a Chef's skill.
SELECT DISTINCT E.name
FROM Employee E
WHERE NOT EXISTS (
    SELECT P.skill
    FROM Position P
    WHERE P.skill = 'Chef'
    AND NOT EXISTS (
        SELECT DA.emp_no
        FROM Duty_Allocation DA
        WHERE DA.emp_no = E.emp_no
        AND DA.posting_no = P.posting_no
    )
);

-- 6. Find the employees with the lowest pay rate.
SELECT name, pay_rate
FROM Employee
WHERE pay_rate = (SELECT MIN(pay_rate) FROM Employee);

-- 7. Get the employee numbers of all employees working on at least two dates.
SELECT emp_no
FROM Duty_Allocation
GROUP BY emp_no
HAVING COUNT(DISTINCT day) >= 2;

-- 8. Get a list of names of employees with the skill of Chef who are assigned a duty.
SELECT DISTINCT E.name
FROM Employee E
INNER JOIN Duty_Allocation DA ON E.emp_no = DA.emp_no
WHERE E.skill = 'Chef';

-- 9. Get a list of employees not assigned a duty.
SELECT name FROM Employee
WHERE emp_no NOT IN (SELECT emp_no FROM Duty_Allocation);

-- 10. Get a count of different employees on each shift.
SELECT shift, COUNT(DISTINCT emp_no) AS employee_count
FROM Duty_Allocation
GROUP BY shift;
